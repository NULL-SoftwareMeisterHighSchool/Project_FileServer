// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: users/service.proto

package users_pb

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UserEventService_PublishUserCreated_FullMethodName = "/users.UserEventService/PublishUserCreated"
	UserEventService_PublishUserDeleted_FullMethodName = "/users.UserEventService/PublishUserDeleted"
)

// UserEventServiceClient is the client API for UserEventService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserEventServiceClient interface {
	PublishUserCreated(ctx context.Context, in *CreateUserEvent, opts ...grpc.CallOption) (*empty.Empty, error)
	PublishUserDeleted(ctx context.Context, in *DeleteUserEvent, opts ...grpc.CallOption) (*empty.Empty, error)
}

type userEventServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserEventServiceClient(cc grpc.ClientConnInterface) UserEventServiceClient {
	return &userEventServiceClient{cc}
}

func (c *userEventServiceClient) PublishUserCreated(ctx context.Context, in *CreateUserEvent, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, UserEventService_PublishUserCreated_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userEventServiceClient) PublishUserDeleted(ctx context.Context, in *DeleteUserEvent, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, UserEventService_PublishUserDeleted_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserEventServiceServer is the server API for UserEventService service.
// All implementations must embed UnimplementedUserEventServiceServer
// for forward compatibility
type UserEventServiceServer interface {
	PublishUserCreated(context.Context, *CreateUserEvent) (*empty.Empty, error)
	PublishUserDeleted(context.Context, *DeleteUserEvent) (*empty.Empty, error)
	mustEmbedUnimplementedUserEventServiceServer()
}

// UnimplementedUserEventServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserEventServiceServer struct {
}

func (UnimplementedUserEventServiceServer) PublishUserCreated(context.Context, *CreateUserEvent) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishUserCreated not implemented")
}
func (UnimplementedUserEventServiceServer) PublishUserDeleted(context.Context, *DeleteUserEvent) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishUserDeleted not implemented")
}
func (UnimplementedUserEventServiceServer) mustEmbedUnimplementedUserEventServiceServer() {}

// UnsafeUserEventServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserEventServiceServer will
// result in compilation errors.
type UnsafeUserEventServiceServer interface {
	mustEmbedUnimplementedUserEventServiceServer()
}

func RegisterUserEventServiceServer(s grpc.ServiceRegistrar, srv UserEventServiceServer) {
	s.RegisterService(&UserEventService_ServiceDesc, srv)
}

func _UserEventService_PublishUserCreated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserEventServiceServer).PublishUserCreated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserEventService_PublishUserCreated_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserEventServiceServer).PublishUserCreated(ctx, req.(*CreateUserEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserEventService_PublishUserDeleted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserEventServiceServer).PublishUserDeleted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserEventService_PublishUserDeleted_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserEventServiceServer).PublishUserDeleted(ctx, req.(*DeleteUserEvent))
	}
	return interceptor(ctx, in, info, handler)
}

// UserEventService_ServiceDesc is the grpc.ServiceDesc for UserEventService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserEventService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "users.UserEventService",
	HandlerType: (*UserEventServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PublishUserCreated",
			Handler:    _UserEventService_PublishUserCreated_Handler,
		},
		{
			MethodName: "PublishUserDeleted",
			Handler:    _UserEventService_PublishUserDeleted_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "users/service.proto",
}
